{% set version = "9.4.0.58" %}
{% set platform = "linux-x86_64" %}  # [linux64]
{% set platform = "linux-sbsa" %}  # [aarch64]
{% set platform = "windows-x86_64" %}  # [win]
{% set extension = "tar.xz" %}  # [not win]
{% set extension = "zip" %}  # [win]

package:
  name: cudnn
  version: {{ version }}

source:
  url: https://developer.download.nvidia.com/compute/cudnn/redist/cudnn/{{ platform }}/cudnn-{{ platform }}-{{ version }}_cuda11-archive.{{ extension }}  # [(cuda_compiler_version or "").startswith("11")]
  url: https://developer.download.nvidia.com/compute/cudnn/redist/cudnn/{{ platform }}/cudnn-{{ platform }}-{{ version }}_cuda12-archive.{{ extension }}  # [(cuda_compiler_version or "").startswith("12")]
  sha256: 34a3c798764b8fc10c7145065798fb530d62073e88a3b0cfdcec458e2ace4467  # [linux64 and (cuda_compiler_version or "").startswith("11")]
  sha256: 1ae128159a8c01b1fd8709050a30813ed9a4dd95824c0d3ddf841c52c8e25218  # [linux64 and (cuda_compiler_version or "").startswith("12")]
  sha256: aa39d5a1d52fbf8c92a5a0c0cdb9b8d2772f99be15ee91c1a22932ac81d0f0dd  # [aarch64 and (cuda_compiler_version or "").startswith("11")]
  sha256: 07c1b686b3dfa3a976dfc03e886fe44190c49c55f05795ea912d49518bf7d0cd  # [aarch64 and (cuda_compiler_version or "").startswith("12")]
  sha256: 2f5389d9769fc7b13fcc08ae050f8f911506e76a3b785abcc53cde97d4b3a5a5  # [win and (cuda_compiler_version or "").startswith("11")]
  sha256: c7c642c8db950d32c283acbb6a3d2aaeb484ae3fcef2eb7fee5523b72303a452  # [win and (cuda_compiler_version or "").startswith("12")]

build:
  number: 0
  skip: True  # [cuda_compiler_version in ("None", None)]
  # Disable binary relocation to workaround patchelf issue
  # xref: https://github.com/NixOS/patchelf/issues/492
  binary_relocation: false
  script:
    - mkdir -p $PREFIX/include               # [linux]
    - cp include/cudnn*.h $PREFIX/include/   # [linux]
    - mkdir -p $PREFIX/lib                   # [linux]
    - mv lib/libcudnn*.so* $PREFIX/lib/      # [linux]

    - mkdir %LIBRARY_INC%                                   # [win]
    - copy %SRC_DIR%\\include\\cudnn*.h %LIBRARY_INC%\\     # [win]
    - mkdir %LIBRARY_LIB%                                   # [win]
    - copy %SRC_DIR%\\lib\\x64\\cudnn*.lib %LIBRARY_LIB%\\  # [win]
    - mkdir %LIBRARY_BIN%                                   # [win]
    - copy %SRC_DIR%\\bin\\cudnn*.dll %LIBRARY_BIN%\\       # [win]
  ignore_run_exports_from:
    - {{ compiler('cuda') }}
    - libcublas-dev  # [(cuda_compiler_version or "").startswith("12")]
  run_exports:
    - {{ pin_subpackage('cudnn') }}

requirements:
  build:
    - {{ stdlib('c') }}
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - {{ compiler('cuda') }}
    - arm-variant * {{ arm_variant_type }}  # [aarch64]
    - patchelf >=0.12  # [linux]
  host:
    - cuda-version {{ cuda_compiler_version }}
    # For Windows, zlib is statically linked into CUDNN since version 9.2
    # https://docs.nvidia.com/deeplearning/cudnn/latest/release-notes.html#cudnn-9-2-0
    # For Linux, zlib remains a dynamically linked dependency
    - zlib  # [not win]
  run:
    - {{ pin_compatible("cuda-version", min_pin="x", max_pin="x") }}
    - cudatoolkit       # [(cuda_compiler_version or "").startswith("11")]
    - cuda-nvrtc        # [(cuda_compiler_version or "").startswith("12")]
    - libcublas         # [(cuda_compiler_version or "").startswith("12")]
  run_constrained:
    - arm-variant * {{ arm_variant_type }}  # [aarch64]

test:
  requires:
    - {{ compiler('c') }}  # [linux]
  files:
    - test_load_elf.c      # [linux]
  commands:
    - if not exist %LIBRARY_INC%/cudnn.h exit 1                       # [win]
    - if not exist %LIBRARY_INC%/cudnn_adv.h exit 1                   # [win]
    - if not exist %LIBRARY_LIB%/cudnn.lib exit 1                     # [win]
    - if not exist %LIBRARY_LIB%/cudnn_adv.lib exit 1                 # [win]
    - if not exist %LIBRARY_BIN%/cudnn64_9.dll exit 1                 # [win]
    - if not exist %LIBRARY_BIN%/cudnn_adv64_9.dll exit 1             # [win]
    - test -f $PREFIX/include/cudnn.h                                 # [linux]
    - test -f $PREFIX/include/cudnn_adv.h                             # [linux]
    - test -f $PREFIX/lib/libcudnn.so                                 # [linux]
    - test -f $PREFIX/lib/libcudnn_adv.so                             # [linux]
    - ${GCC} test_load_elf.c -std=c99 -Werror -ldl -o test_load_elf   # [linux]
    - for f in $PREFIX/lib/libcudnn*.so; do ./test_load_elf $f; done  # [linux]

about:
  home: https://developer.nvidia.com/cudnn
  license: LicenseRef-cuDNN-Software-License-Agreement
  license_file: LICENSE
  license_url: https://docs.nvidia.com/deeplearning/cudnn/sla/index.html
  summary: "NVIDIA's cuDNN deep neural network acceleration library"
  description: |
    NVIDIA CUDA Deep Neural Network (cuDNN) is a GPU-accelerated library of
    primitives for deep neural networks. It provides highly tuned
    implementations of routines arising frequently in DNN applications.

    License Agreements:- The packages are governed by the NVIDIA cuDNN
    Software License Agreement (EULA). By downloading and using the packages,
    you accept the terms and conditions of the NVIDIA cuDNN EULA -
    https://docs.nvidia.com/deeplearning/cudnn/sla/index.html
  doc_url: https://docs.nvidia.com/deeplearning/cudnn/
  dev_url: https://developer.nvidia.com/rdp/cudnn-download

extra:
  recipe-maintainers:
    - conda-forge/cuda
    - billysuh7
    - adibbley
    - bdice
    - jakirkham
    - vyasr
